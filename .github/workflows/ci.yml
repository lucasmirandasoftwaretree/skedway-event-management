name: CI

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  backend:
    name: Backend (Laravel + Docker)
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Env (create .env for compose)
        working-directory: backend
        run: |
          set -e
          cp .env.example .env
          # Ajustes para o ambiente de CI com os serviços do compose
          sed -i 's/^DB_HOST=.*/DB_HOST=db/' .env
          sed -i 's/^DB_PORT=.*/DB_PORT=3306/' .env
          sed -i 's/^REDIS_HOST=.*/REDIS_HOST=redis/' .env
          # Gera uma APP_KEY se estiver vazia
          php -r '$p=".env"; $e=file_get_contents($p); if(!preg_match("/^APP_KEY=.+/m",$e)){ $e.="\nAPP_KEY=base64:".base64_encode(random_bytes(32))."\n"; } else { $e=preg_replace("/^APP_KEY=.*/m","APP_KEY=base64:".base64_encode(random_bytes(32)),$e); } file_put_contents($p,$e);'
          head -n 20 .env || true

      - name: Start containers
        run: |
          docker version
          docker compose version
          docker compose up -d --build backend db
          docker compose ps

      - name: Prepare Laravel (composer, key, migrate)
        run: |
          docker compose exec -T backend composer install --no-interaction --prefer-dist --no-progress
          docker compose exec -T backend php artisan key:generate || true
          # espera o MySQL ficar pronto (db é o serviço do compose)
          for i in {1..20}; do
            if docker compose exec -T backend php -r "try { new PDO('mysql:host=db;port=3306','app','app'); echo 'ok'; } catch (Throwable $e) { exit(1);}"; then
              echo 'DB ready'; break
            fi
            echo 'Waiting DB...'; sleep 3
          done
          docker compose exec -T backend php artisan migrate --force || true

      - name: PHP Style (Pint)
        run: docker compose exec -T backend php vendor/bin/pint --test

      - name: PHP Unit
        run: docker compose exec -T backend php vendor/bin/phpunit --testdox

      - name: Teardown
        if: always()
        run: docker compose down -v || true

  frontend:
    name: Frontend (Vite/React)
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: frontend
    env:
      VITE_API_BASE_URL: ${{ vars.VITE_API_BASE_URL }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm
          cache-dependency-path: frontend/package-lock.json

      - name: Install
        run: npm ci

      - name: Typecheck
        run: npm run typecheck --if-present

      - name: Lint
        run: npm run lint --if-present

      - name: Build
        run: npm run build

      - name: Upload dist
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: frontend-dist
          path: frontend/dist